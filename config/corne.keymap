/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | ESC  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LSHFT|
//                    | GUI | LWR | SPC |   | ENT | RSE  | CTRL|
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T         &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp ESC   &kp A &kp S &kp D &kp F &kp G         &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B         &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LGUI &mo 1 &mt LSHFT SPACE   &mt LSHFT RET &mo 2 &kp LCTRL
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                          	        &kp LGUI     &trans       &kp SPACE      &kp RET  &mo 3    &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  |  |  \  | BKSP |
// |      |  {  |  }  |  +  |  =  |  -  |   |  _  |  (  |  )  |  "  |  :  |      |
// |      |  `  |  ~  |  [  |  ]  |     |   |     |  '  |  {  |  }  | "|" |  ~   |
//                    |     |     | SUP |   |     |     |     |
                        bindings = <
   &kp TAB   &kp EXCL  &kp AT    &kp HASH &kp DLLR    &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp PIPE &kp BSLH  &kp BSPC
   &trans    &kp LBRC  &kp RBRC  &kp PLUS &kp EQUAL   &kp MINUS   &kp LPAR  &kp RPAR  &kp LBKT        &kp DQT  &kp COLON &trans
   &trans    &kp LBRC  &kp RBRC  &kp PLUS &kp EQUAL   &kp MINUS   &kp LPAR  &kp RPAR  &kp LBKT        &kp DQT  &kp COLON &trans
   //&trans    &kp GRAVE &kp TILDE &kp LBKP &kp RBKP    &trans      &kp SQT   &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE  &kp TILDE
                    	       &trans   &mo 3       &trans      &trans    &trans    &trans
                        >;
                };

                super_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  F1  |  F2  |  F3  |  F4  |  F5  |   |  F6  |  F7  |  F8  |  F9  |  F10  | F11 |
// |      |      |      |      |      |      |   | PREV | PLAY | NEXT | VOLD | VOLU  | F12 |
// | BTCLR| BT1  | BT2  | BT3  | BT4  | BT5  |   |      |      |      |      |       | MUT |
//                    | GUI |     | SPC |        | ENT |     | ALT |
                        bindings = <
   &trans      &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6     &kp F7     &kp F8     &kp F9       &kp F10      &kp F11
   &trans      &trans       &trans       &trans       &trans       &trans         &kp C_PREV &kp C_PLAY &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &kp F12
   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans     &trans     &trans     &trans       &trans       &kp C_MUTE
                          	        &trans        &trans       &trans         &trans     &trans     &trans
                        >;
                };
        };
};
